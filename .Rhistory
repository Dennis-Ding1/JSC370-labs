library(data.table)
library(dtplyr)
library(dplyr)
library(mgcv)
# Download the data
stations <- fread("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv")
stations[, USAF := as.integer(USAF)]
# Dealing with NAs and 999999
stations[, USAF   := fifelse(USAF == 999999, NA_integer_, USAF)]
stations[, CTRY   := fifelse(CTRY == "", NA_character_, CTRY)]
stations[, STATE  := fifelse(STATE == "", NA_character_, STATE)]
# Selecting the three relevant columns, and keeping unique records
stations <- unique(stations[, list(USAF, CTRY, STATE)])
# Dropping NAs
stations <- stations[!is.na(USAF)]
# Removing duplicates
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]
# Read in the met data
download.file(
"https://raw.githubusercontent.com/JSC370/JSC370-2025/main/data/met/met_all.gz",
destfile = "met_all.gz",
method   = "curl",
timeout  = 60
)
met <- data.table::fread("met_all.gz")
system("git remote add origin git@github.com:Dennis-Ding1/JSC370-labs
")
system("git push -u origin master")
library(data.table)
library(dtplyr)
library(dplyr)
library(mgcv)
library(ggplot2)
library(leaflet)
library(kableExtra)
met <- merge(
x = met,
y = stations,
all.x = TRUE, all.y = FALSE,
by.x = "USAFID", by.y  = "USAF"
)
medians <- met[, .(
temp_50 = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp_50 = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press_50 = quantile(atm.press, probs = .5, na.rm = TRUE)
)]
medians
station_med <- met[, .(
temp = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press = quantile(atm.press, probs = .5, na.rm = TRUE)
), by = .(USAFID, STATE)]
# Median  temperature stations
station_med[, temp_dist := abs(temp - medians$temp_50)]
median_temp_station <- station_med[temp_dist == 0]
median_temp_station
# Median wind.sp stations
station_med[, wind.sp_dist := abs(wind.sp - medians$wind.sp_50)]
median_wind.sp_station <- station_med[wind.sp_dist == 0]
median_wind.sp_station
# Median atm.press stations
station_med[, atm.press_dist := abs(atm.press - medians$atm.press_50)]
median_atm.press_station <- station_med[atm.press_dist == 0]
median_atm.press_station
View(stations)
# Download the data
stations <- fread("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv")
stations[, USAF := as.integer(USAF)]
# Dealing with NAs and 999999
stations[, USAF   := fifelse(USAF == 999999, NA_integer_, USAF)]
stations[, CTRY   := fifelse(CTRY == "", NA_character_, CTRY)]
stations[, STATE  := fifelse(STATE == "", NA_character_, STATE)]
# Selecting the three relevant columns, and keeping unique records
stations <- unique(stations[, list(USAF, CTRY, STATE)])
# Dropping NAs
stations <- stations[!is.na(USAF)]
# Removing duplicates
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]
# Read in the met data
# Median per state
station_med[, temp_50 := quantile(temp, probs = .5, na.rm = TRUE), by = STATE]
library(data.table)
library(dtplyr)
library(dplyr)
library(mgcv)
library(ggplot2)
library(leaflet)
library(kableExtra)
# Download the data
stations <- fread("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv")
stations[, USAF := as.integer(USAF)]
# Dealing with NAs and 999999
stations[, USAF   := fifelse(USAF == 999999, NA_integer_, USAF)]
stations[, CTRY   := fifelse(CTRY == "", NA_character_, CTRY)]
stations[, STATE  := fifelse(STATE == "", NA_character_, STATE)]
# Selecting the three relevant columns, and keeping unique records
stations <- unique(stations[, list(USAF, CTRY, STATE)])
# Dropping NAs
stations <- stations[!is.na(USAF)]
# Removing duplicates
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]
# Read in the met data
met <- data.table::fread("met_all.gz")
met <- merge(
x = met,
y = stations,
all.x = TRUE, all.y = FALSE,
by.x = "USAFID", by.y  = "USAF"
)
medians <- met[, .(
temp_50 = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp_50 = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press_50 = quantile(atm.press, probs = .5, na.rm = TRUE)
)]
medians
station_med <- met[, .(
temp = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press = quantile(atm.press, probs = .5, na.rm = TRUE)
), by = .(USAFID, STATE)]
# Median temperature stations
station_med[, temp_dist := abs(temp - medians$temp_50)]
median_temp_station <- station_med[temp_dist == 0]
median_temp_station
# Median wind.sp stations
station_med[, wind.sp_dist := abs(wind.sp - medians$wind.sp_50)]
median_wind.sp_station <- station_med[wind.sp_dist == 0]
median_wind.sp_station
# Median atm.press stations
station_med[, atm.press_dist := abs(atm.press - medians$atm.press_50)]
median_atm.press_station <- station_med[atm.press_dist == 0]
median_atm.press_station
# Median per state
station_med[, temp_50 := quantile(temp, probs = .5, na.rm = TRUE), by = STATE]
station_med[, wind.sp_50 := quantile(wind.sp, probs = .5, na.rm = TRUE), by = STATE]
station_med[, eudist := sqrt(
(temp - temp_50)^2 + (wind.sp - wind.sp_50)^2
)]
id_station <- station_med[, .SD[which.min(eudist)], by = STATE]
id_station <- merge(
x = id_station, y = stations,
by.x = "USAFID", by.y = "USAF",
all.x = TRUE, all.y = FALSE
)
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# 1) Get the midpoint of the state
mid_point <- met[, .(
lon_50 = quantile(lon, probs = .5, na.rm = TRUE),
lat_50 = quantile(lat, probs = .5, na.rm = TRUE)
), by = STATE]
mid <- merge(x = met, y = mid_point, by = "STATE")
# 2) Calculate Euclidean distance for lon and lat
mid[, mid_eudist := sqrt(
(lon - lon_50)^2 + (lat - lat_50)^2
)]
# 3) Find the closest station to the midpoint of the state
mid_station <- mid[, .SD[which.min(mid_point)], by = "STATE"]
# 1) Get the midpoint of the state
mid_point <- met[, .(
lon_50 = quantile(lon, probs = .5, na.rm = TRUE),
lat_50 = quantile(lat, probs = .5, na.rm = TRUE)
), by = STATE]
mid <- merge(x = met, y = mid_point, by = "STATE")
# 2) Calculate Euclidean distance for lon and lat
mid[, mid_eudist := sqrt(
(lon - lon_50)^2 + (lat - lat_50)^2
)]
# 3) Find the closest station to the midpoint of the state
mid_station <- mid[, .SD[which.min(mid_eudist)], by = "STATE"]
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addCircles(
data = mid_station,
lat = ~lat, lng = ~lon, popup = "geographic mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "blue"
) %>%
addCircles(
data = id_station,
lat = ~LAT, lng = ~LON, popup = "eudist mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "magenta"
)
head(id_station)
medians <- met[, .(
temp_50 = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp_50 = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press_50 = quantile(atm.press, probs = .5, na.rm = TRUE),
lon = mean(lon , na.rm = TRUE),
lat = mean(lat , na.rm = TRUE)
)]
medians
library(data.table)
library(dtplyr)
library(dplyr)
library(mgcv)
library(ggplot2)
library(leaflet)
library(kableExtra)
# Download the data
stations <- fread("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv")
stations[, USAF := as.integer(USAF)]
# Dealing with NAs and 999999
stations[, USAF   := fifelse(USAF == 999999, NA_integer_, USAF)]
stations[, CTRY   := fifelse(CTRY == "", NA_character_, CTRY)]
stations[, STATE  := fifelse(STATE == "", NA_character_, STATE)]
# Selecting the three relevant columns, and keeping unique records
stations <- unique(stations[, list(USAF, CTRY, STATE)])
# Dropping NAs
stations <- stations[!is.na(USAF)]
# Removing duplicates
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]
# Read in the met data
met <- data.table::fread("met_all.gz")
met <- merge(
x = met,
y = stations,
all.x = TRUE, all.y = FALSE,
by.x = "USAFID", by.y  = "USAF"
)
medians <- met[, .(
temp_50 = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp_50 = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press_50 = quantile(atm.press, probs = .5, na.rm = TRUE),
lon = mean(lon , na.rm = TRUE),
lat = mean(lat , na.rm = TRUE)
)]
medians
station_med <- met[, .(
temp = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press = quantile(atm.press, probs = .5, na.rm = TRUE)
), by = .(USAFID, STATE)]
# Median temperature stations
station_med[, temp_dist := abs(temp - medians$temp_50)]
median_temp_station <- station_med[temp_dist == 0]
median_temp_station
# Median wind.sp stations
station_med[, wind.sp_dist := abs(wind.sp - medians$wind.sp_50)]
median_wind.sp_station <- station_med[wind.sp_dist == 0]
median_wind.sp_station
# Median atm.press stations
station_med[, atm.press_dist := abs(atm.press - medians$atm.press_50)]
median_atm.press_station <- station_med[atm.press_dist == 0]
median_atm.press_station
# Median per state
station_med[, temp_50 := quantile(temp, probs = .5, na.rm = TRUE), by = STATE]
station_med[, wind.sp_50 := quantile(wind.sp, probs = .5, na.rm = TRUE), by = STATE]
station_med[, eudist := sqrt(
(temp - temp_50)^2 + (wind.sp - wind.sp_50)^2
)]
id_station <- station_med[, .SD[which.min(eudist)], by = STATE]
id_station <- merge(
x = id_station, y = stations,
by.x = "USAFID", by.y = "USAF",
all.x = TRUE, all.y = FALSE
)
# 1) Get the midpoint of the state
mid_point <- met[, .(
lon_50 = quantile(lon, probs = .5, na.rm = TRUE),
lat_50 = quantile(lat, probs = .5, na.rm = TRUE)
), by = STATE]
mid <- merge(x = met, y = mid_point, by = "STATE")
# 2) Calculate Euclidean distance for lon and lat
mid[, mid_eudist := sqrt(
(lon - lon_50)^2 + (lat - lat_50)^2
)]
# 3) Find the closest station to the midpoint of the state
mid_station <- mid[, .SD[which.min(mid_eudist)], by = "STATE"]
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addCircles(
data = mid_station,
lat = ~lat, lng = ~lon, popup = "geographic mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "blue"
) %>%
addCircles(
data = id_station,
lat = ~LAT, lng = ~LON, popup = "eudist mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "magenta"
)
station_med <- met[, .(
temp = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press = quantile(atm.press, probs = .5, na.rm = TRUE),
lon = mean(lon , na.rm = TRUE),
lat = mean(lat , na.rm = TRUE)
), by = .(USAFID, STATE)]
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addCircles(
data = mid_station,
lat = ~lat, lng = ~lon, popup = "geographic mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "blue"
) %>%
addCircles(
data = id_station,
lat = ~LAT, lng = ~LON, popup = "eudist mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "magenta"
)
library(data.table)
library(dtplyr)
library(dplyr)
library(mgcv)
library(ggplot2)
library(leaflet)
library(kableExtra)
# Download the data
stations <- fread("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv")
stations[, USAF := as.integer(USAF)]
# Dealing with NAs and 999999
stations[, USAF   := fifelse(USAF == 999999, NA_integer_, USAF)]
stations[, CTRY   := fifelse(CTRY == "", NA_character_, CTRY)]
stations[, STATE  := fifelse(STATE == "", NA_character_, STATE)]
# Selecting the three relevant columns, and keeping unique records
stations <- unique(stations[, list(USAF, CTRY, STATE)])
# Dropping NAs
stations <- stations[!is.na(USAF)]
# Removing duplicates
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]
# Read in the met data
met <- data.table::fread("met_all.gz")
met <- merge(
x = met,
y = stations,
all.x = TRUE, all.y = FALSE,
by.x = "USAFID", by.y  = "USAF"
)
medians <- met[, .(
temp_50 = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp_50 = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press_50 = quantile(atm.press, probs = .5, na.rm = TRUE)
)]
medians
station_med <- met[, .(
temp = quantile(temp, probs = .5, na.rm = TRUE),
wind.sp = quantile(wind.sp, probs = .5, na.rm = TRUE),
atm.press = quantile(atm.press, probs = .5, na.rm = TRUE),
lon = mean(lon , na.rm = TRUE),
lat = mean(lat , na.rm = TRUE)
), by = .(USAFID, STATE)]
# Median temperature stations
station_med[, temp_dist := abs(temp - medians$temp_50)]
median_temp_station <- station_med[temp_dist == 0]
median_temp_station
# Median wind.sp stations
station_med[, wind.sp_dist := abs(wind.sp - medians$wind.sp_50)]
median_wind.sp_station <- station_med[wind.sp_dist == 0]
median_wind.sp_station
# Median atm.press stations
station_med[, atm.press_dist := abs(atm.press - medians$atm.press_50)]
median_atm.press_station <- station_med[atm.press_dist == 0]
median_atm.press_station
# Median per state
station_med[, temp_50 := quantile(temp, probs = .5, na.rm = TRUE), by = STATE]
station_med[, wind.sp_50 := quantile(wind.sp, probs = .5, na.rm = TRUE), by = STATE]
station_med[, eudist := sqrt(
(temp - temp_50)^2 + (wind.sp - wind.sp_50)^2
)]
id_station <- station_med[, .SD[which.min(eudist)], by = STATE]
id_station <- merge(
x = id_station, y = stations,
by.x = "USAFID", by.y = "USAF",
all.x = TRUE, all.y = FALSE
)
# 1) Get the midpoint of the state
mid_point <- met[, .(
lon_50 = quantile(lon, probs = .5, na.rm = TRUE),
lat_50 = quantile(lat, probs = .5, na.rm = TRUE)
), by = STATE]
mid <- merge(x = met, y = mid_point, by = "STATE")
# 2) Calculate Euclidean distance for lon and lat
mid[, mid_eudist := sqrt(
(lon - lon_50)^2 + (lat - lat_50)^2
)]
# 3) Find the closest station to the midpoint of the state
mid_station <- mid[, .SD[which.min(mid_eudist)], by = "STATE"]
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addCircles(
data = mid_station,
lat = ~lat, lng = ~lon, popup = "geographic mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "blue"
) %>%
addCircles(
data = id_station,
lat = ~LAT, lng = ~LON, popup = "eudist mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "magenta"
)
head(id_station)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addCircles(
data = mid_station,
lat = ~lat, lng = ~lon, popup = "geographic mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "blue"
) %>%
addCircles(
data = id_station,
lat = ~lat, lng = ~lon, popup = "eudist mid station",
opacity = 1, fillOpacity = 1, radius = 400, color = "magenta"
)
station_med_lt <- lazy_dt(station_med)
station_med_lt <- station_med_lt |>
filter(between(atm.press, 1000, 1020)) |>
collect()
ggplot(station_med_lt, aes(x = atm.press, y = temp)) +
geom_point() +
geom_smooth(method = "lm", col = 'cyan') +
geom_smooth(method = "gam", col = 'blue')
lm_mod <- lm(temp ~ atm.press, data = station_med_lt)
summary(lm_mod)
gam_mod <- gam(temp ~ s(atm.press, bs = "cr", k = 20), data = station_med_lt)
summary(gam_mod)
plot(gam_mod)
library(data.table)
library(dtplyr)
library(dplyr)
library(mgcv)
library(ggplot2)
library(leaflet)
library(kableExtra)
library(tidyr)
met[, elev_cat := fifelse(
elev < 90, "low-elev", "high-elev"
)]
summary_table <- met |>
group_by(STATE, elev_cat) |>
summarize(temp_mean = mean(temp, na.rm = TRUE)) |>
pivot_wider(names_from = elev_cat, values_from = temp_mean)
kable(summary_table, booktabs = TRUE) %>%
kable_styling(font_size = 10) %>%
kable_paper("hover", full_width = F)
summary_table <- summary_table |>
mutate(avg_temp_level = case_when(
temp_mean < 20 ~ "low",
temp_mean >= 20 & temp_mean < 25 ~ "mid",
temp_mean >= 25 ~ "high"
))
